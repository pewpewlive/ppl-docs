"use strict";(self.webpackChunkppl_docs=self.webpackChunkppl_docs||[]).push([[363],{2351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"APIs/types","title":"Types","description":"int","source":"@site/docs/APIs/types.mdx","sourceDirName":"APIs","slug":"/APIs/types","permalink":"/ppl-docs/APIs/types","draft":false,"unlisted":false,"editUrl":"https://github.com/pewpewlive/ppl-docs/edit/master/docs/APIs/types.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Home","permalink":"/ppl-docs/"},"next":{"title":"pewpew library","permalink":"/ppl-docs/APIs/PewPew"}}');var s=n(4848),r=n(8453),a=n(6540);function o(){const e=(0,a.useRef)(null);return(0,s.jsxs)("div",{children:[(0,s.jsx)("input",{type:"text",defaultValue:"2.718",onChange:t=>{e.current.innerText=function(e){let t=parseFloat(e);if(isNaN(t))return"Error!";let n=Math.abs(t),i=Math.floor(n);i>2<<51&&(i=2<<51);let s=t<0?"-":"",r=Math.floor(n%1*4096),a="";return 0!=r&&(a="."+r),`${s}${i}${a}fx`}(t.target.value)}}),(0,s.jsx)("br",{}),(0,s.jsx)("code",{ref:e,children:"2.2940fx"})]})}const l={sidebar_position:1},d="Types",c={},u=[{value:"int",id:"int",level:2},{value:"FixedPoint",id:"fixedpoint",level:2},{value:"EntityId",id:"entityid",level:2},{value:"string",id:"string",level:2},{value:"float",id:"float",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"types",children:"Types"})}),"\n",(0,s.jsx)(t.h2,{id:"int",children:"int"}),"\n",(0,s.jsx)(t.p,{children:"Stores integers. Used for many things, including durations and colors.\nDurations represents a number of game ticks. There are 30 game ticks per seconds. For example, a duration of 45 ticks represents 1.5 seconds.\nColors are stored in 32 bits in the RGBA order. For example, 0xff000080 encodes pure red (0xff0000) with an alpha value of 0x80."}),"\n",(0,s.jsx)(t.h2,{id:"fixedpoint",children:"FixedPoint"}),"\n",(0,s.jsx)(t.p,{children:"Stores fixed point numbers.\nUsed for storing and computing all the game related values that require more precision than what integer numbers can provide. That includes coordinates, angles, velocities, etc...\nThis built-in type is specific to PewPew, and does not exist in other Lua interpreters, which is why it is documented more thoroughly than the other types.\nA FixedPoint constant is defined using a number followed by the fx postfix:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"local a = 100fx\n"})}),"\n",(0,s.jsx)(t.p,{children:"You can perform regular arithmetic operations on it (+, -, /, *, <, ==, >, and, or, xor), but you can't mix FixedPoint values with non-FixedPoint values:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"local a = 100fx\nlocal b = a / 3fx -- Ok\nlocal c = a / 3   -- Not ok! 3 is not a FixedPoint\n"})}),"\n",(0,s.jsx)(t.p,{children:"Internally, FixedPoint numbers are implemented using dux_fixed, which uses 64 bits integers. 52 bits are used to encode the integral part, leaving 12 bits for the fractional part.\nYou can initialize the fractional part by placing a '.' followed by an integer in the range [0, 4095]:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"local a = 1fx -- Stores the value 1\nlocal b = 1.0fx -- Stores the value 1\nlocal c = 1.2048fx -- Stores the value 1.5\nlocal d = 1.4095fx -- Stores the value 1.9997558...\nlocal e = -1.4095fx -- Stores the value -1.9997558...\nlocal f = 1.4096fx -- Not ok! The decimal part must be less than 4096\n"})}),"\n",(0,s.jsx)(t.p,{children:"Here's an interactive converter that can help understanding the format:"}),"\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(t.h2,{id:"entityid",children:"EntityId"}),"\n",(0,s.jsx)(t.p,{children:"An integer that identifies an entity. EntityIds are guaranteed to be unique: they are not reused for the duration of a game."}),"\n",(0,s.jsx)(t.h2,{id:"string",children:"string"}),"\n",(0,s.jsx)(t.p,{children:"Stores a sequence of characters.\nTypically used to hold text and file paths. The API only accepts strings less than 1000 bytes long."}),"\n",(0,s.jsx)(t.h2,{id:"float",children:"float"}),"\n",(0,s.jsx)(t.p,{children:"Stores floating point numbers. Because they make determinism hard to guarantee, floats must only be used in Lua scripts that define meshes or sounds. Although it is still technically possible to use floats in game scripts, they will eventually be forbidden."})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);