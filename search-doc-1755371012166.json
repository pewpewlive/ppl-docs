{"searchDocs":[{"title":"Standard libraries","type":0,"sectionRef":"#","url":"/ppl-docs/APIs/standard-libraries","content":"","keywords":"","version":"Next"},{"title":"String library​","type":1,"pageTitle":"Standard libraries","url":"/ppl-docs/APIs/standard-libraries#string-library","content":" The library exposes the following functions:  bytechardumpfindformatgmatchgsublenlowermatchrepreversesubupperpackpacksizeunpack  The official Lua website has the documentation for the string library.  ","version":"Next","tagName":"h2"},{"title":"Table library​","type":1,"pageTitle":"Standard libraries","url":"/ppl-docs/APIs/standard-libraries#table-library","content":" The library exposes the following functions:  concatinsertpackunpackremovemovesort  The official Lua website has the documentation for the table library.  ","version":"Next","tagName":"h2"},{"title":"Math library​","type":1,"pageTitle":"Standard libraries","url":"/ppl-docs/APIs/standard-libraries#math-library","content":" The Lua math library is only available for meshes and sound effects. It is not available when creating levels because the functions it offer are often for dealing with floating point numbers.  The library exposes the following functions:  absacosasinatanceilcosdegexptointegerfloorfmodultlogmaxminmodfradrandomsinsincossqrttantype  and the constants:  pihugemaxintegermininteger  The only absent API is randomseed (the RNG is already seeded with a good seed). If you need a predictable random sequence, use your own RNG implemented in Lua.  The official Lua website has the documentation for the math library. ","version":"Next","tagName":"h2"},{"title":"Types","type":0,"sectionRef":"#","url":"/ppl-docs/APIs/types","content":"","keywords":"","version":"Next"},{"title":"int​","type":1,"pageTitle":"Types","url":"/ppl-docs/APIs/types#int","content":" Stores integers. Used for many things, including durations and colors. Durations represents a number of game ticks. There are 30 game ticks per seconds. For example, a duration of 45 ticks represents 1.5 seconds. Colors are stored in 32 bits in the RGBA order. For example, 0xff000080 encodes pure red (0xff0000) with an alpha value of 0x80.  ","version":"Next","tagName":"h2"},{"title":"FixedPoint​","type":1,"pageTitle":"Types","url":"/ppl-docs/APIs/types#fixedpoint","content":" Stores fixed point numbers. Used for storing and computing all the game related values that require more precision than what integer numbers can provide. That includes coordinates, angles, velocities, etc... This built-in type is specific to PewPew, and does not exist in other Lua interpreters, which is why it is documented more thoroughly than the other types. A FixedPoint constant is defined using a number followed by the fx postfix:  local a = 100fx   You can perform regular arithmetic operations on it (+, -, /, *, &lt;, ==, &gt;, and, or, xor), but you can't mix FixedPoint values with non-FixedPoint values:  local a = 100fx local b = a / 3fx -- Ok local c = a / 3 -- Not ok! 3 is not a FixedPoint   Internally, FixedPoint numbers are implemented using dux_fixed, which uses 64 bits integers. 52 bits are used to encode the integral part, leaving 12 bits for the fractional part. You can initialize the fractional part by placing a '.' followed by an integer in the range [0, 4095]:  local a = 1fx -- Stores the value 1 local b = 1.0fx -- Stores the value 1 local c = 1.2048fx -- Stores the value 1.5 local d = 1.4095fx -- Stores the value 1.9997558... local e = -1.4095fx -- Stores the value -1.9997558... local f = 1.4096fx -- Not ok! The decimal part must be less than 4096   Here's an interactive converter that can help understanding the format:   2.2940fx  ","version":"Next","tagName":"h2"},{"title":"EntityId​","type":1,"pageTitle":"Types","url":"/ppl-docs/APIs/types#entityid","content":" An integer that identifies an entity. EntityIds are guaranteed to be unique: they are not reused for the duration of a game.  ","version":"Next","tagName":"h2"},{"title":"string​","type":1,"pageTitle":"Types","url":"/ppl-docs/APIs/types#string","content":" Stores a sequence of characters. Typically used to hold text and file paths. The API only accepts strings less than 1000 bytes long.  ","version":"Next","tagName":"h2"},{"title":"float​","type":1,"pageTitle":"Types","url":"/ppl-docs/APIs/types#float","content":" Stores floating point numbers. Because they make determinism hard to guarantee, floats must only be used in Lua scripts that define meshes or sounds. Although it is still technically possible to use floats in game scripts, they will eventually be forbidden. ","version":"Next","tagName":"h2"},{"title":"Manifest files","type":0,"sectionRef":"#","url":"/ppl-docs/File Information/manifest-files","content":"","keywords":"","version":"Next"},{"title":"Fields descriptions​","type":1,"pageTitle":"Manifest files","url":"/ppl-docs/File Information/manifest-files#fields-descriptions","content":" name is the name of the level. Keep it short (30 char max).descriptions is an array of strings. You can put multiple descriptions, but for now only the first string is displayed.information is an optional string that can be 350 characters long that should contain information relevant to the level.entry_point contains the path to the main entry point of the level.  warning entry_point must be level.lua. In the future other entry points may be supported.  has_score_leaderboard is a boolean that specifies whether the level should have a score leaderboard.rank_thresholds_1p contains the requirements for the players to unlock bronze, silver, and gold stars. You must not include this field if has_score_leaderboard is false. If all the thresholds are 0, then the level will not give out stars. ","version":"Next","tagName":"h2"},{"title":"Mesh files","type":0,"sectionRef":"#","url":"/ppl-docs/File Information/mesh-files","content":"","keywords":"","version":"Next"},{"title":"Vertexes​","type":1,"pageTitle":"Mesh files","url":"/ppl-docs/File Information/mesh-files#vertexes","content":" The vertexes field contains the list of vertexes. Vertexes are represented by three numbers. Those numbers can be floating point numbers.  ","version":"Next","tagName":"h2"},{"title":"Segment chains​","type":1,"pageTitle":"Mesh files","url":"/ppl-docs/File Information/mesh-files#segment-chains","content":" The segment field describes which vertexes should be joined by a segment. It contain a list of segment chains. Each segment chain is a table that holds a lists of 0-based indexes to vertexes that should be connected by a segment.  Important: There is a difference between segments = {{0,1}, {1,2}} and segments = {{0,1,2}}. In the first case, 2 separate segments will be generated. In the second case, two segments linked with a miter join will be generated.  ","version":"Next","tagName":"h2"},{"title":"Colors​","type":1,"pageTitle":"Mesh files","url":"/ppl-docs/File Information/mesh-files#colors","content":" The optional colors field contains the colors of each vertexes. If the colors field is present, it must contain as many colors as there are vertexes. Colors are 32 bit RGBA values.  0xff0000ff -- opaque red 0xff000080 -- slightly transparent red 0xff000000 -- fully transparent red   note All meshes are rendered with additive blending.  ","version":"Next","tagName":"h2"},{"title":"Procedural rendering​","type":1,"pageTitle":"Mesh files","url":"/ppl-docs/File Information/mesh-files#procedural-rendering","content":" Astute readers may have realized that because meshes is described in a Lua script, it can be generated at runtime. See for instance this example.  This is the prefered way of creating complex meshes, as it is both more efficient and more consistent with the rest of the game. ","version":"Next","tagName":"h2"},{"title":"Sound files","type":0,"sectionRef":"#","url":"/ppl-docs/File Information/sound-files","content":"Sound files Example of a file that defines a single sound: sounds = { { frequency = 500, sustain = 0.3, waveform = &quot;triangle&quot;, } } The following fields can be used to describe a sound: attack (in seconds)decay (in seconds)sustain (in seconds)sustainPunch (in seconds)amplificationharmonicsharmonicsFallofftremoloDepthtremoloFrequency (in hertz)frequency (in hertz)frequencyDeltaSweepfrequencyJump1OnsetfrequencyJump2OnsetfrequencyJump1AmountfrequencyJump2AmountfrequencySweepvibratoFrequency (in hertz)vibratoDepth (in hertz)flangerOffsetflangerOffsetSweeprepeatFrequencywaveform (&quot;sine&quot;, &quot;triangle&quot;, &quot;sawtooth&quot;, &quot;square&quot;, &quot;tangent&quot;, &quot;whistle&quot;, &quot;breaker&quot;, &quot;whitenoise&quot;, &quot;pinknoise&quot;, &quot;brownnoise&quot;) Creating a sound with JFXR While it's possible to hand-craft sounds by hand-editing sound files, in practice most people use the GUI jfxr for sound creation. After obtaining a sound you are satisfied with, you can &quot;export&quot; the sound by using the link to your sound generated by jfxr. A script then transforms the resulting jfxr link (for example this link) into a table consumable by PewPew Live. See this example.","keywords":"","version":"Next"},{"title":"fmath library","type":0,"sectionRef":"#","url":"/ppl-docs/APIs/Fmath","content":"","keywords":"","version":"Next"},{"title":"Functions​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#functions","content":" ","version":"Next","tagName":"h2"},{"title":"max_fixedpoint()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#max_fixedpoint","content":" fmath.max_fixedpoint(): FixedPoint   Returns the maximum value a fixedpoint integer can take.    ","version":"Next","tagName":"h3"},{"title":"random_fixedpoint()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#random_fixedpoint","content":" fmath.random_fixedpoint( min: FixedPoint, max: FixedPoint ): FixedPoint   Returns a random fixedpoint value in the range [min, max]. max must be greater or equal to min.    ","version":"Next","tagName":"h3"},{"title":"random_int()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#random_int","content":" fmath.random_int( min: int, max: int ): int   Returns an integer in the range [min, max]. max must be greater or equal to min.    ","version":"Next","tagName":"h3"},{"title":"sqrt()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#sqrt","content":" fmath.sqrt(x: FixedPoint): FixedPoint   Returns the square root of x. x must be greater or equal to 0.    ","version":"Next","tagName":"h3"},{"title":"from_fraction()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#from_fraction","content":" fmath.from_fraction( numerator: int, denominator: int ): FixedPoint   Returns the fixedpoint value representing the fraction numerator/denominator. denominator must not be equal to zero.    ","version":"Next","tagName":"h3"},{"title":"to_int()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#to_int","content":" fmath.to_int(value: FixedPoint): int   Returns the integral part of the value.    ","version":"Next","tagName":"h3"},{"title":"abs_fixedpoint()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#abs_fixedpoint","content":" fmath.abs_fixedpoint(value: FixedPoint): FixedPoint   Returns the absolute value.    ","version":"Next","tagName":"h3"},{"title":"to_fixedpoint()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#to_fixedpoint","content":" fmath.to_fixedpoint(value: int): FixedPoint   Returns a fixedpoint value with the integral part of value, and no fractional part.    ","version":"Next","tagName":"h3"},{"title":"sincos()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#sincos","content":" fmath.sincos(angle: FixedPoint): FixedPoint, FixedPoint   Returns the sinus and cosinus of angle. angle is in radian.    ","version":"Next","tagName":"h3"},{"title":"atan2()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#atan2","content":" fmath.atan2( y: FixedPoint, x: FixedPoint ): FixedPoint   Returns the principal value of the arc tangent of y/x. Returns a value in the range [0, 2π[.    ","version":"Next","tagName":"h3"},{"title":"tau()​","type":1,"pageTitle":"fmath library","url":"/ppl-docs/APIs/Fmath#tau","content":" fmath.tau(): FixedPoint   Returns τ (aka 2π). ","version":"Next","tagName":"h3"},{"title":"Intermediate","type":0,"sectionRef":"#","url":"/ppl-docs/Guides/Lua/intermediate","content":"","keywords":"","version":"Next"},{"title":"Getting started​","type":1,"pageTitle":"Intermediate","url":"/ppl-docs/Guides/Lua/intermediate#getting-started","content":" So in order to begin making a level, you will need to visit a couple of links.  https://github.com/pewpewlive/ppl-utils &lt;--- This link right here will take you to the files you need to make your level! Scroll down to Getting Started and follow the directions!  /APIs/PewPew/ &lt;--- This link right here is the PewPew Live API. That means, many important functions and items that are needed to make your level are found on this site!  Also, make sure you have a text editor to make your code in! If you need help with this, go to the Discord server and ask about it in #pewpew-technical-discussion!  ","version":"Next","tagName":"h2"},{"title":"PewPew Live API - functions​","type":1,"pageTitle":"Intermediate","url":"/ppl-docs/Guides/Lua/intermediate#pewpew-live-api---functions","content":" Before we begin in our first steps to making a level, it is crucial to understand the PewPew Live API.  Let's take a look...    These are some of the functions that you will be using in PewPew Live! I suggest giving it a lookover, and try to see what it all means! Whenever you use a function in PewPew's library (API), you MUST put pewpew. infront of it!  So you see, print(String str) would be typed in your code as pewpew.print(String str). The black boxes with green text (things like String, Int, etc) tell you what kind of data the function uses, and what type of function it is! Don't worry too much about the type of function, focus mainly on the data that the functions take in, like Int and String.  ","version":"Next","tagName":"h2"},{"title":"PewPew Live API - fmath​","type":1,"pageTitle":"Intermediate","url":"/ppl-docs/Guides/Lua/intermediate#pewpew-live-api---fmath","content":" Another main part of the API is the Fmath library!    These are more functions in PewPew Live, but slightly different. To use these functions, you MUST put fmath. infront of it!  So sqrt(FixedPoint x) would be typed in your code as fmath.sqrt(FixedPoint x). Now, what exactly is FixedPoint?  FixedPoint refers to a specific kind of number in PewPew levels. We just call them fixed point numbers. They are strange, but don't worry, you'll get the hang of them! You really only use fixed point numbers when dealing with location and size. But don't worry, fixed point numbers and normal numbers are the same!  ...For the most part. See, you write a normal number as n, and fixed point numbers are written as nfx. Fixed point numbers are put in the code by putting fx after your number! So you have numbers like 1, 2, 3. But in fixed point numbers, they would be 1fx, 2fx, 3fx. And so on!  Another main difference I should note is their decimals! It's a little strange, and I won't go into too much detail, but 2.6fx does not exist. The number 2.5 is written as 2.2048fx. It's strange, I know! And there is a specific and good reason for this! But for now, don't worry too much about decimals. If you need to use a number that isn't a full number, stick with fractions! Like instead of writing 2.2048fx, write 5fx/2fx! See? Much better! Just remember that these fixed point numbers are mostly used for location and size! In later examples we will see exactly how they are used!  ","version":"Next","tagName":"h2"},{"title":"PewPew Live API - enums​","type":1,"pageTitle":"Intermediate","url":"/ppl-docs/Guides/Lua/intermediate#pewpew-live-api---enums","content":" The last main part that I need to cover is the Enums section of the API    So what is an Enum? Enum stands for Enumerator, and is just a fancy way of talking about a list of items and properties. So here is the list of enemies and the properties of enemies, AKA the Enums, that a person can access and use. Again, you need to put pewpew. infront of these when you use them. A quick example of a reference to a specific enemy would be pewpew.MothershipType.THREE_CORNERS. This piece of code references the pink triangles (motherships) that you see in Eskiv.  We will go into detail on how to use Enums in specific ways, but for now, that is the general briefing on how to read the PewPew Live API!  ","version":"Next","tagName":"h2"},{"title":"Where does this level go?​","type":1,"pageTitle":"Intermediate","url":"/ppl-docs/Guides/Lua/intermediate#where-does-this-level-go","content":" So we are finally about to make our level. Where do we keep it? Well at the very top, you went to the main github page and downloaded the files, you need that!  You will need to extract the file, and then you will enter it. You will see two files, a folder and an .exe file. That .exe is very important to running your level, keep it in mind!    You will then see a bunch of files, and a folder. You do NOT need to worry about these files at all! Just the folder! The levels folder is where all custom levels are stored! So that is the folder you enter into next!    As you can see below, there are some levels already here! The developer, JF, put these levels here as examples for level creators to look at while they work! This is where you will create your level.    So all you need to do is make a new folder. I'm going to call my folder TUTORIAL_LEVEL, although you can call your folder whatever you like.    And there you go! You now have the location of your custom level, and all the levels are nice and organized! Time for the fun stuff!  ","version":"Next","tagName":"h2"},{"title":"Open your level​","type":1,"pageTitle":"Intermediate","url":"/ppl-docs/Guides/Lua/intermediate#open-your-level","content":" Here we can go into the environment that we need to code! Just to let you know, I use a text editor called Visual Studio Code. You may use something different, and again, if you need help with this text editor stuff, reach out in the discord!  You can either open up just your level file in your text editor, or you can open the folder that contains all the levels. This is helpful for looking at other levels while you code! So head back to this screen below:    And open the levels folder with your text editor! If you need help with this, feel free to reach out for help! If you're ready, then proceed down below!    As pointed out by the very helpful green arrow, my level is on the left. The folder was initially empty. You need create a new script that will be your main level script. It HAS to be called level.lua. This is how PewPew Live enters into your level and runs it. It might change in the future, but it is good practice to keep consistency. And with the script made, you have an empty canvas. What's next?  ","version":"Next","tagName":"h2"},{"title":"The start of a level​","type":1,"pageTitle":"Intermediate","url":"/ppl-docs/Guides/Lua/intermediate#the-start-of-a-level","content":" This next portion will go over how to make your map, and how to spawn the player. Yes! You have to put in the code that spawns the player yourself! But don't worry, it's not too terrible.  Look back into the PewPew API, there is a function that sets the map size. I'll state it here, it is set_level_size(FixedPoint width, FixedPoint height). This is the code that will make your map! It is very simple, and here is a sample code.  local level_height = 300fx local level_length = 400fx pewpew.set_level_size(level_length, level_height)   And that's all there is to it! You have made a map! Remember, when using a PewPew function, you MUST put pewpew. in front, or it won't work! And we are dealing with location/size, so fixed point numbers must be used! And you don't need to set the sizes as variables, I just consider it good practice. It's also easier to reference the map sizes if they are variables. You could have written pewpew.set_level_size(300fx, 400fx), but it's up to you.  Hold it! Before you try out your level, you need to spawn the player! This requires another handy function from the API. This one is new_player_ship(FixedPoint x, FixedPoint y, int player_index). A player's spawn point is a matter of location, so fixed points are required! Also, notice how the index is not a fixed point number, but a normal number! The index is not size or location, so using normal numbers is fine!  pewpew.new_player_ship(100fx, 100fx, 0)   And there you have it! The player has spawned, and you have a map made. I should back track, what is player_index? And what does the 0 have to do with it? Well each player, whether it is single-player or multi-player, are assigned an &quot;index&quot; to keep track of which player is which. Player 1 has an index of 0, player 2 has an index 1, and so on. BUT at the current moment, custom levels only support one player, so whenever you use new_player_ship(FixedPoint x, FixedPoint y, int player_index), just use 0 for the player_index.  The code above worked just fine, but another way, which is good practice, to write the above code is  local x_spawn = 100fx local y_spawn = 100fx local p1_index = 0 local player1_ship = pewpew.new_player_ship(x_spawn, y_spawn, p1_index)   This piece of code sets the ship as a variable that you can reference later on! I highly recommend using this second piece of code rather than the first one!  And there you have it! Down below is the final product.    Now there's one more step before we can test out our level! We need something called a manifest  The manifest is your level description, name, and entry! I will explain entry in a bit, but for now, here's how to make a manifest. This one is actually written in a language other than Lua. I won't explain it too much, I will just show you the code and you can make a manifest. But first, make a new file in your level folder and call it manifest.json. NOT manifest.lua. Like I said, it's a different language!  In the manifest you need to put this piece of code:  { &quot;name&quot;: &quot;LEVEL_NAME&quot;, &quot;descriptions&quot;: [&quot;LEVEL DESCRIPTION&quot;], &quot;entry_point&quot;: &quot;level.lua&quot; }   You can look at it and kind of get a sense of what's going on, but I will brief you on it. You put your level name where &quot;LEVEL_NAME&quot; is INSIDE the quotation &quot;&quot; marks! You can do the same with the level description, inside the quotation marks and brackets [&quot;&quot;]! See the &quot;entry_point&quot;? That's why we named the main script level.lua. The game enters through that script and runs your level. And that is all you need to know about this new file. Down below is the manifest for my tutorial level.    You are done! You can run your level!  Ready to take it out for a spin? Good! Remember that .exe I mentioned some time back? Yeah, we need that. Head back to the screen below.    You need to run the ppl-utils file. It will open a window, and your computer will warn you about this file. Go ahead and run the file anyway, and you will be able to try out your level! You should get something like below:    Your levels are being run! Now you need to go to the website that the screen above is telling you! The website to run your levels is http://localhost:9000/pewpew.html  You should get a screen like this:    As you can see, the manifest dictated what name my level would show as.  My tutorial world is at the top of the page, called &quot;Tutorial Level&quot;. As it should, as that is what I put in the manifest above. You will need to find your level in the list of levels. And there you go! Just go into your level and give it a whirl! ","version":"Next","tagName":"h2"},{"title":"Game limits","type":0,"sectionRef":"#","url":"/ppl-docs/Other/game-limits","content":"","keywords":"","version":"Next"},{"title":"Entity count​","type":1,"pageTitle":"Game limits","url":"/ppl-docs/Other/game-limits#entity-count","content":" At most 1300 entities can exist at any given moment. This includes the player's bullets. If there are already 1300 entities, no more entities will be created. This means that the player won't be able to shoot.  ","version":"Next","tagName":"h2"},{"title":"Duration​","type":1,"pageTitle":"Game limits","url":"/ppl-docs/Other/game-limits#duration","content":" A game lasts at most 1 hour. If the level has not called stop_game by then, it will be called automatically. The reason for this limitation is that replays then become too large.  ","version":"Next","tagName":"h2"},{"title":"Memory usage​","type":1,"pageTitle":"Game limits","url":"/ppl-docs/Other/game-limits#memory-usage","content":" The Lua interpreter can't use more than 500 KB of memory when running a level. Unless you have a memory leak in your level, this shouldn't be a problem.The Lua interpreter can't use more than 3 MB of memory when loading a mesh. You will need to split a mesh into multiple files if you are hitting this limit.The Lua interpreter can't use more than 3 MB of memory when loading sounds. Unless you are doing something really crazy, this will never be a problem. ","version":"Next","tagName":"h2"},{"title":"Design principles","type":0,"sectionRef":"#","url":"/ppl-docs/Other/level-design-principles","content":"","keywords":"","version":"Next"},{"title":"General guidelines​","type":1,"pageTitle":"Design principles","url":"/ppl-docs/Other/level-design-principles#general-guidelines","content":" Gameplay is king.To be consistent with the rest of the game: Prefer procedurally generated graphics over manually created graphics.Prefer angular designs instead of curved designs.Prefer abstract designs over realistic designs.  ","version":"Next","tagName":"h2"},{"title":"Gameplay advice​","type":1,"pageTitle":"Design principles","url":"/ppl-docs/Other/level-design-principles#gameplay-advice","content":" ","version":"Next","tagName":"h2"},{"title":"Users will try to camp in the corners​","type":1,"pageTitle":"Design principles","url":"/ppl-docs/Other/level-design-principles#users-will-try-to-camp-in-the-corners","content":" Corners reduce the exposure of the players' ships, so players will naturally tend to hide there. Either incentivize players to move by putting bonuses away from the corners, or de-incentivize players from staying there by spawning enemies there. The same thing applies (to a lesser extent) to level's borders.  ","version":"Next","tagName":"h3"},{"title":"Fair randomness​","type":1,"pageTitle":"Design principles","url":"/ppl-docs/Other/level-design-principles#fair-randomness","content":" If players have a very slim chance of getting a bonus that massively increases their score, the top of the leaderboard will be populated by people that were lucky, not by people that were skilled. This is not necessarily a bad thing, but it's something to keep in mind.  ","version":"Next","tagName":"h3"},{"title":"Be mindful of farming​","type":1,"pageTitle":"Design principles","url":"/ppl-docs/Other/level-design-principles#be-mindful-of-farming","content":" Ask yourself if it is possible for the player to accumulate a lot of points (or a lot of shields) simply by not triggering an event. For example, I once made a level where shields kept appearing until all enemies were killed. Some players discovered that by leaving one enemy alive, they could farm shields. ","version":"Next","tagName":"h3"},{"title":"Beginner Lua Tutorial","type":0,"sectionRef":"#","url":"/ppl-docs/Guides/Lua/beginner","content":"","keywords":"","version":"Next"},{"title":"Printing example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#printing-example","content":" print(&quot;Hello world!&quot;)   Output: Hello World!  print(2 + 3)   Output: 5  print(&quot;2 + 3&quot;)   Output: 2 + 3  Anything in quotation marks &quot; &quot; or ' ' is a string. Printing a string will output exactly what you type! Anything not inside of quotation marks are registered as numbers, variables, or math statements!  ","version":"Next","tagName":"h2"},{"title":"Variables example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#variables-example","content":" my_variable = 5 print(my_variable)   Output: 5  x = 2 y = 10 print(x + y)   Output: 12  x = 2 y = 10 print(&quot;x + y&quot;)   Output: x + y  some_text = &quot;this is cool&quot; print(some_text)   Output: this is cool  Variables can be assigned practically any value! You can store them as numbers, strings, and more!  ","version":"Next","tagName":"h2"},{"title":"If statement example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#if-statement-example","content":" x = 6 if x &gt; 5 then print(&quot;Greater than 5!&quot;) end   Output:Greater than 5!  a = true b = false if a then print(&quot;True&quot;) end if a and b then print(&quot;True&quot;) else print(&quot;False&quot;) end if a or b then print(&quot;True&quot;) else print(&quot;False&quot;) end if b then print(&quot;True&quot;) end   Output:  True False True   x = 5 y = 5 if x == y then print(&quot;True&quot;) end   Output:True  Variables can also be assigned boolean values, which are true and false! With &quot;and&quot; statements, both or all arguments need to be true to equal true in total! With &quot;or&quot; statements, only one needs to be true to equal true in total! Both or all need to be false to be false in total!  ","version":"Next","tagName":"h2"},{"title":"For loop example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#for-loop-example","content":" for i = 1, 5 do print(&quot;Hello!&quot;) end   The following output is repeated 5 times:Hello!  for i = 1, 10 do print(i) end   Output:  1 2 3 4 5 6 7 8 9 10   for i = 1, 10, 2 do print(i) end   Output:  1 3 5 7 9   for i = 0, -10, -1 do print(i) end   Output:  0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10   local loopcount = 25 for i = 1, loopcount do print(&quot;Loop!&quot;) end   The following output is repeated 25 times:Loop!  For loops are useful for running the same code multiple times! The first line of the for loop has the syntax for i = Index, End Value, Increments. You set i as your starting value, separate with a comma, set your end value, and you can optionally set your increment as your third value. Don't forget the &quot;do&quot;!  ","version":"Next","tagName":"h2"},{"title":"Nested for loop example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#nested-for-loop-example","content":" for i = 1, 5 do print(&quot;This is the outer loop!&quot;) for j = 1, 3 do print(&quot;This is the inner loop!&quot;) end end   The following output is repeated 5 times:  This is the outer loop! This is the inner loop! This is the inner loop! This is the inner loop!   local swim_laps = 10 local paddles = 5 for i = 1, swim_laps do print(&quot;Lap: &quot; .. i) for j = 1, paddles do print(&quot;Paddle: &quot; .. j) end end   Output:  Lap: 1 Paddle: 1 Paddle: 2   ...etc.  for i = 1, 5 do for i = 1, 2 do print(&quot;This is fine!&quot;) end end   The following output is repeated 10 times: This is fine!  You are allowed to put for loops inside of other for loops! In if you put a for loop that repeats 3 times inside of a for loop that repeats 5 times, that inner loop runs 15 times total! With for loops, you can use any variable as your index! And with nested for loops, it is good practice to use different variables, like using i and j instead of using i twice.  ","version":"Next","tagName":"h2"},{"title":"While loop example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#while-loop-example","content":" local x = 3 while x &gt; 0 do print(x) x = x - 1 end   Output:  3 2 1   local x = 3 local y = 4 while x &gt; 0 and y &gt; 0 do print(x,y) x = x - 1 y = y - 1 end   Output:  3 4 2 3 1 2   while true do print(&quot;Hello!&quot;) end   The following output is repeated indefinitely: Hello!  A while loop is very similar to a for loop, except you can think of it as an if statement and for loop combined! The while loop runs while the conditions are true. So for a while true do loop, the loop runs forever! Be careful when making a while true do loop!  ","version":"Next","tagName":"h2"},{"title":"Break loops example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#break-loops-example","content":" while true do print(&quot;loop!&quot;) break end   The above loop will only run once. Output: loop!  x = 0 while true do print(&quot;loop!&quot;) x = x + 1 if x &gt;= 2 then break end end   The above loop will run 2 times. Output:  loop! loop!   for i = 1, 10 do print(i) if i &gt;= 3 then break end end   Output:  1 2 3   Using break is very useful! The purpose for break is to stop a loop from running! So using break in a for or while loop will ultimately terminate it!  ","version":"Next","tagName":"h2"},{"title":"Functions example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#functions-example","content":" local function myFunction() local x = 4 local y = 2 print(x + y) end myFunction()   Output:  6   local function AddNum(num1, num2) print(num1 + num2) end AddNum(99,121) AddNum(44,33)   Output:  220 77   local function Cubed(number) newNumber = number * number * number return newNumber end local x = Cubed(2) local y = Cubed(3) print(x,y) local a = Cubed(10) print(a)   Output:  8 27 1000   Functions are good for reducing the amount of code you have to write. If you have a piece of code you are going to use over and over with slightly different values, then make that piece of code a function! You can give functions parameters which is the num1 and num2 in myFunction(num1, num2). When you use the function later in your code, don't forget to fill in the parentheses! You can also use return to essentially turn a function into a value.  ","version":"Next","tagName":"h2"},{"title":"Tables example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#tables-example","content":" local myTable = { 1, 5, 3 } print(myTable[1]) print(myTable[2]) print(myTable[3])   Output:  1 5 3   local names = { &quot;Bob&quot;, &quot;Moses&quot;, &quot;Joe&quot; } for i = 1, #names do print(names[i]) end names[4] = &quot;Dawn&quot; print(names[4]) table.insert(names,&quot;Rambo&quot;) print(names[5])   Output:  Bob Moses Joe Dawn Rambo   local person = { health = 100, speed = 20, isAwesome = true, name = &quot;John&quot; } print(&quot;This person's health is &quot; .. person.health) print(&quot;This person's health is &quot; .. person[&quot;health&quot;]) print(&quot;This person's speed is &quot; .. person.speed) print(&quot;This person is awesome. &quot; .. person.isAwesome) print(&quot;This person's name is &quot; .. person.name) print(&quot;This person's name is &quot; .. person[&quot;name&quot;]) person.home = &quot;USA&quot; person[&quot;money&quot;] = 250 print(&quot;This person's home is &quot; .. person.home) print(&quot;This person has &quot; .. person[&quot;money&quot;] .. &quot; dollars!&quot;)   Output:  This person's health is 100 This person's health is 100 This person's speed is 20 This person is awesome. true This person's name is John This person's name is John This person's home is USA This person has 250 dollars!   Tables are very good for storing lots of information. You can even put things inside of tables after the table is made! Done with table.insert(TableName, data) or you add things with table[n] = data. And remember, the table doesn't have to be defined on the same line! The brackets can be on separate lines to make it easier to read!  ","version":"Next","tagName":"h2"},{"title":"for i, v in pairs() loop example​","type":1,"pageTitle":"Beginner Lua Tutorial","url":"/ppl-docs/Guides/Lua/beginner#for-i-v-in-pairs-loop-example","content":" local numbers = { 3, 4, 99, 202, -3 } for i, v in pairs(numbers) do print(i, v) end   Output:  1 3 2 4 3 99 4 202 5 -3   local names = { &quot;Jack&quot;, &quot;Mike&quot;, &quot;Melinda&quot;, &quot;Stacy&quot; } for index, person in pairs(names) do print(&quot;Person &quot; .. index .. &quot; is &quot; .. person) end   Output:  Person 1 is Jack Person 2 is Mike Person 3 is Melinda Person 4 is Stacy   For i, v in pairs loops are a useful kind of for loop! They basically go through a list and use the data stored in the table. The variable i is the index or position of the table where the data is stored. The variable v is the value of the data. Inside of pairs() is the table you want to use: pairs(TableName). The variables don't have to be named &quot;i&quot; and &quot;v&quot;, they can be named whatever you want! ","version":"Next","tagName":"h2"},{"title":"60 FPS Animation","type":0,"sectionRef":"#","url":"/ppl-docs/Guides/Other/60fps-animation","content":"","keywords":"","version":"Next"},{"title":"Mesh animations​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#mesh-animations","content":" Mesh animations in PewPew Live are achieved by iterating through multiple meshes that are slightly different from each other. The meshes are usually stored in a single file and are made procedurally.  ","version":"Next","tagName":"h2"},{"title":"Limitations​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#limitations","content":" If you have some experience with level creation, you should know that PewPew Live runs at 30 ticks per second and that the graphics are interpolated. However, the interpolation only applies to transformations (position, rotation and scale). But, what about mesh animations? Since you can only change something about the entity once per tick, mesh animations would be limited to 30 frames per second. Thankfully, the PPL Lua API has just the right function that can be used to achieve 60 FPS mesh animations. This function is:  pewpew.customizable_entity_set_flipping_meshes(entity_id, file_path, index1, index2)   When used, the entity will switch between the two specified meshes in a single game tick. But, how does that help us achieve 60 FPS animations? Let's see.  ","version":"Next","tagName":"h2"},{"title":"Setting up​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#setting-up","content":" Before we can start making an animation and assigning it to an entity, we need to have a base level that we can work with. Start by creating a new folder in ./levels/ (this is next to the ppl-utils executable). In the newly created folder, make sure you have these files:  level.luagraphics.lua (The name of your mesh file can be different, but remember it!)manifest.json  If you need a basic manifest.json, here is a template you can use.  { &quot;name&quot;: &quot;Sample: Animation&quot;, &quot;descriptions&quot;: [&quot;A smooth hexagon!&quot;], &quot;entry_point&quot;: &quot;level.lua&quot;, &quot;has_score_leaderboard&quot;: false }   ","version":"Next","tagName":"h2"},{"title":"Getting started​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#getting-started","content":" Now that we have a level base, we can start making our mesh and entity. If at any point you face a problem, try following the steps again, or check the final .lua files.  ","version":"Next","tagName":"h2"},{"title":"Making the mesh​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#making-the-mesh","content":" Open graphics.lua (or your mesh file) and start by writing the following:  meshes = {}   Since our meshes are going to be procedurally generated, we won't be making every vertex by hand, instead, we will make Lua do that for us! Essentially when making a procedural mesh, we make a table with our vertexes and segments, that we later add to the meshes table. The vertex and segment tables are going to hold the generated points and segment indexes.  Add this to your mesh file:  -- Tables for our mesh vertexes, segments local computed_vertexes, computed_segments = {}, {}   Now we need a way to populate the tables with our mesh points and segments.  note In this example, we will be making a hexagon!  Start by:  Defining the inner_radius and outer_radius variables (they will be used when generating the hexagon sides).Creating two tables inner_segment and outer_segment for the two hexagons.Defining a variable vertex_index, which will be used for the segments.  Now, create a for-loop that will go from i = 0 to i = 5 (since we want it to be a hexagon). From this, we can calculate the desired angle for the vertex, by multiplying math.tau (complete 360 degrees angle) by i / 6. Get the corresponding sine and cosine of the angle (for the y and x positions respectively). Multiply one pair by the inner radius and one by the outer radius, and add them to the vertexes table. For the inner ring, we add the index of the first vertex in the iteration (which will simply be vertex_index) to inner_segment, and the index of the second one (which will be vertex_index + 1) to outer_segment. For a cool effect, we shall also connect these two vertexes to each other. To do this, we simply add the segment {vertex_index, vertex_index + 1} to the computed_segments table. And at the end of our iteration, we increment vertex_index by 2, as we have added two vertexes.  The resulting code should look something like this:  local inner_radius = 48 -- Inner hexagon local outer_radius = 96 -- Outer hexagon local inner_segment = {} -- Inner hexagon local outer_segment = {} -- Outer hexagon local vertex_index = 0 for i = 0, 5 do -- We want to go from angle 0 to 2π, skipping by 2π / 6, making a hexagon local angle = math.tau * i / 6 local y, x = math.sincos(angle) -- y and x positions on the unit circle table.insert(computed_vertexes, {x * inner_radius, y * inner_radius}) -- Vertex for the inner hexagon table.insert(computed_vertexes, {x * outer_radius, y * outer_radius}) -- Vertex for the outer hexagon table.insert(inner_segment, vertex_index) -- Adding the vertex to the segment forming the inner hexagon table.insert(outer_segment, vertex_index + 1) -- Adding the vertex to the segment forming the outer hexagon table.insert(computed_segments, {vertex_index, vertex_index + 1}) -- Line joining the corresponding vertexes of the inner and outer hexagons vertex_index = vertex_index + 2 end   Because of the way we generated the segments, at the end of the for-loop we add the last vertex to the respective hexagons. But, we need to close the loop. For that, we need to add the first vertex of the respective rings to the respective segments. We also need to add these two segments to the computed_segments table. After the for-loop, we can add them by doing this:  table.insert(inner_segment, 0) -- The first vertex of the inner hexagon has the index of 0 table.insert(outer_segment, 1) -- The first vertex of the outer hexagon has the index of 1, as it was generated after that of the inner hexagon table.insert(computed_segments, inner_segment) table.insert(computed_segments, outer_segment)   At the end, we add the mesh made up of the generated vertexes and segments.  table.insert(meshes, { vertexes = computed_vertexes, segments = computed_segments })   ","version":"Next","tagName":"h3"},{"title":"Creating the entity and assigning it the mesh​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#creating-the-entity-and-assigning-it-the-mesh","content":" Now, go to level.lua, and start by creating an entity at position (0fx, 0fx) (or any other position that you'd like). Next, set the entity's mesh to the one we just created.  local id = pewpew.new_customizable_entity(0fx, 0fx) pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, 0) -- Change the filename if needed   note Setting level size and creating a player is optional.  Run the ppl-utils executable and open your level at http://localhost:9000/pewpew.html  You should see the following:  If you don't, you might have made a mistake somewhere! Check the steps to make the mesh again and check for mistakes.  ","version":"Next","tagName":"h3"},{"title":"Animating the mesh​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#animating-the-mesh","content":" Let's get into animating our mesh! For this tutorial, we will have the inner hexagon rotating counter-clockwise and the outer hexagon rotating clockwise.  To do this, we need multiple &quot;meshes&quot; that we will set our entity to.  tip We are moving our initial mesh code into another for-loop. This lets us achieve an animation by creating multiple versions of our hexagon that we just made. If you notice any problems, make sure you moved the local computed segment and vertex variables into the first for-loop!  In your mesh file, change the for-loop to the following:  local inner_radius = 48 -- Inner hexagon local outer_radius = 96 -- Outer hexagon for frame = 0, 59 do -- Our animation will have 60 frames. We want the hexagons to make a full rotation each 60 frames (2 seconds). This does not mean the animation is 60 FPS yet! -- Tables for our mesh vertexes, segments local computed_vertexes, computed_segments = {}, {} local inner_segment = {} -- Inner hexagon local outer_segment = {} -- Outer hexagon local vertex_index = 0 for i = 0, 5 do -- We want to go from angle 0 to 2π, skipping by 2π / 6, making a hexagon local angle = math.tau * i / 6 local y, x = math.sincos(angle) -- y and x positions on the unit circle table.insert(computed_vertexes, {x * inner_radius, y * inner_radius}) -- Vertex for the inner hexagon table.insert(computed_vertexes, {x * outer_radius, y * outer_radius}) -- Vertex for the outer hexagon table.insert(inner_segment, vertex_index) -- Adding the vertex to the segment forming the inner hexagon table.insert(outer_segment, vertex_index + 1) -- Adding the vertex to the segment forming the outer hexagon table.insert(computed_segments, {vertex_index, vertex_index + 1}) -- Line joining the corresponding vertexes of the inner and outer hexagons vertex_index = vertex_index + 2 end table.insert(inner_segment, 0) -- The first vertex of the inner hexagon has the index of 0 table.insert(outer_segment, 1) -- The first vertex of the outer hexagon has the index of 1, as it was generated after that of the inner hexagon table.insert(computed_segments, inner_segment) table.insert(computed_segments, outer_segment) table.insert(meshes, { vertexes = computed_vertexes, segments = computed_segments }) end   As you can see, the real mesh generation code is pretty much the same, just that we repeat it several times instead, making it have frames!  Now, most importantly, we need to change the way we get the points of our hexagon. Since we want the outer hexagon to turn clockwise and the inner one counter-clockwise, we need to change the angles depending on which frame we are on. This angle offset can be calculated like so:  local angle_offset = math.tau * frame / 60   Since each frame is going to have a specific angle offset, we can add that to our initial angles, meaning we have to change this line:  local y, x = math.sincos(angle)   into  local y1, x1 = math.sincos(angle + angle_offset)   And add a new line below it like so:  local y2, x2 = math.sincos(angle - angle_offset)   We will use x2 and y2 for the outer hexagon. To do this, replace the x * outer_radius and y * outer_radius coordinates for the outer hexagon with x2 * outer_radius and y2 * outer_radius respectively.  We now have 60 frames of meshes that we can use to animate our entity. To do this, we need to use an index which will increase every tick, and use that to set the entity's mesh. This can be done like so:  local tick = 0 pewpew.entity_set_update_callback(id, function() -- We have 60 frames. -- The index of the 60th frame is 59. (Although we are using Lua, mesh and sound indexes start from 0 in PewPew Live API.) -- Loop when we have exceeded past the last frame by using the modulo operator % in Lua. pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, tick % 60) tick = tick + 1 end)   The code is pretty self-explanatory. We increment the index every tick and use that index to set the mesh. Since the meshes we have generated have small changes in them, doing this creates an animation.  The result should look something like this:    As you can see, this animation is running at only 30 frames per second. An animation running at 30 FPS will not look good with the rest of the level as the level might have other content that moves. And as you already know, position transformation is interpolated by PewPew Live. This means that, even though the level runs at 30 ticks per second, the game will interpolate the graphics and display them at 60 FPS, 90 FPS, and so on (the game interpolates the graphics as per the refresh rate of the device, which will usually be higher than 30Hz). To ensure that the difference between the rest of the level and our mesh animation is minimal, we have to make our mesh animation run at least at 60 FPS.  ","version":"Next","tagName":"h2"},{"title":"Making the animation 60 FPS​","type":1,"pageTitle":"60 FPS Animation","url":"/ppl-docs/Guides/Other/60fps-animation#making-the-animation-60-fps","content":" Open your mesh file and replace the line  for frame = 0, 59 do -- 60 frames -- Code that generates the meshes end   with  for frame = 0, 119 do -- 120 frames -- Code that generates the meshes end   and replace the line  local angle_offset = math.tau * frame / 60   with  local angle_offset = math.tau * frame / 120   The new code will create 120 frames or meshes for us.  If you save the files and run your level, you might notice that the animation is getting reset halfway through. This is because at the 60th frame, we have gone only 50% through the animation.  Since we now have 120 frames, we need to change the code in level.lua to account for this change. Open level.lua and change the line  pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, tick % 60)   to  pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, tick % 120)   The new code now shows the complete animation when running the level. However, it is visibly slower. Why is this the case? Remember, in the previous case, the variable angle_offset was increasing by 2π/60 every frame. Now, it is increasing by 2π/120 every frame. You might be wondering why we did this. This is because to achieve a 60 FPS animation that runs with the same speed, we need to have double the amount of frames that we had previously. We now just need to speed the animation back to its original speed.  Open level.lua and change  pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, tick % 120)   to  pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, (tick * 2) % 120)   This should make the animation return to its original speed, as we are skipping every other frame. However, if you save the files and run your level, you will notice no change between the current animation and the one we had at the start. You would in fact be right, there is no difference between the two. Our animation still runs at 30 FPS. This is where flipping meshes comes into play.  Open level.lua and replace  pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, (tick * 2) % 120)   with  pewpew.customizable_entity_set_flipping_meshes(id, &quot;/dynamic/graphics.lua&quot;, (tick * 2) % 120, (tick * 2 + 1) % 120)   When we set flipping meshes of an entity, that entity goes over the two specified meshes in a single game tick. This means that, in the first game tick, it will have the mesh at index 0 for half a tick and will have the mesh at index 1 for the remaining half of the tick. In the next tick, we are resetting the flipping meshes. The expression tick * 2 now has a value of 2. The entity now has the mesh at index 2 for half a tick and has the mesh at index 3 for half a tick. Notice that we have gone over 4 meshes in just 2 game ticks (2 meshes per game tick)! The way in which we have used this creates an animation that runs at 60 FPS. Now, if you save the files and run your level, you'll notice that it is a lot smoother than our initial animation. It is exactly twice as smooth. It might look something like this:    Congratulations! You have successfully made an animation that runs at 60 frames per second. I hope that you were able to understand this fairly well. Now, experiment with your code and make creative animations. The files for the complete animation can be found here. ","version":"Next","tagName":"h2"},{"title":"pewpew library","type":0,"sectionRef":"#","url":"/ppl-docs/APIs/PewPew","content":"","keywords":"","version":"Next"},{"title":"Enums​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#enums","content":" ","version":"Next","tagName":"h2"},{"title":"EntityType​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entitytype","content":" ASTEROIDBAFINERTIACMOTHERSHIPMOTHERSHIP_BULLETROLLING_CUBEROLLING_SPHEREUFOWARYCROWDERCUSTOMIZABLE_ENTITYSHIPBOMBBAF_BLUEBAF_REDWARY_MISSILEUFO_BULLETSPINYSUPER_MOTHERSHIPPLAYER_BULLETBOMB_EXPLOSIONPLAYER_EXPLOSIONBONUSFLOATING_MESSAGEPOINTONIUMKAMIKAZEBONUS_IMPLOSIONMACEPLASMA_FIELD  ","version":"Next","tagName":"h3"},{"title":"MothershipType​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#mothershiptype","content":" THREE_CORNERSFOUR_CORNERSFIVE_CORNERSSIX_CORNERSSEVEN_CORNERS  ","version":"Next","tagName":"h3"},{"title":"CannonType​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#cannontype","content":" SINGLETIC_TOCDOUBLETRIPLEFOUR_DIRECTIONSDOUBLE_SWIPEHEMISPHERESHOTGUNLASER  ","version":"Next","tagName":"h3"},{"title":"CannonFrequency​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#cannonfrequency","content":" FREQ_30FREQ_15FREQ_10FREQ_7_5FREQ_6FREQ_5FREQ_3FREQ_2FREQ_1  ","version":"Next","tagName":"h3"},{"title":"BombType​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#bombtype","content":" FREEZEREPULSIVEATOMIZESMALL_ATOMIZESMALL_FREEZE  ","version":"Next","tagName":"h3"},{"title":"MaceType​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#macetype","content":" DAMAGE_PLAYERSDAMAGE_ENTITIES  ","version":"Next","tagName":"h3"},{"title":"BonusType​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#bonustype","content":" REINSTANTIATIONSHIELDSPEEDWEAPONMACE  ","version":"Next","tagName":"h3"},{"title":"WeaponType​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#weapontype","content":" BULLETFREEZE_EXPLOSIONREPULSIVE_EXPLOSIONATOMIZE_EXPLOSIONPLASMA_FIELDWALL_TRAIL_LASSOMACE  ","version":"Next","tagName":"h3"},{"title":"AsteroidSize​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#asteroidsize","content":" SMALLMEDIUMLARGEVERY_LARGE  ","version":"Next","tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#functions","content":" ","version":"Next","tagName":"h2"},{"title":"print()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#print","content":" pewpew.print(str: string)   Prints str in the console for debugging.  Example: local some_number = 42 pewpew.print(&quot;the value of some_number is: &quot; .. some_number)     ","version":"Next","tagName":"h3"},{"title":"print_debug_info()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#print_debug_info","content":" pewpew.print_debug_info()   Prints debug info: the number of entities created and the amount of memory used by the script.  Example: pewpew.print_debug_info()     ","version":"Next","tagName":"h3"},{"title":"set_level_size()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#set_level_size","content":" pewpew.set_level_size( width: FixedPoint, height: FixedPoint )   Sets the level's size. Implicitly adds walls to make sure that entities can not go outside of the level's boundaries. width and height are clamped to the range ]0fx, 6000fx]. If this function is not called, the level size is (10fx, 10fx), which is uselessly small for most cases.  Example: local width = 300fx local height = 200fx pewpew.set_level_size(width, height)     ","version":"Next","tagName":"h3"},{"title":"add_wall()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#add_wall","content":" pewpew.add_wall( start_x: FixedPoint, start_y: FixedPoint, end_x: FixedPoint, end_y: FixedPoint ): int   Adds a wall to the level from (start_x,start_y) to (end_x,end_y), and returns its wall ID. A maximum of 200 walls can be added to a level.  Example: pewpew.add_wall(100fx, 100fx, 200fx, 200fx)     ","version":"Next","tagName":"h3"},{"title":"remove_wall()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#remove_wall","content":" pewpew.remove_wall(wall_id: int)   Remove the wall with the given wall_id.  Example: local wall_id = pewpew.add_wall(100fx, 100fx, 200fx, 200fx) -- Later, when the wall needs to be removed: pewpew.remove_wall(wall_id)     ","version":"Next","tagName":"h3"},{"title":"add_update_callback()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#add_update_callback","content":" pewpew.add_update_callback(update_callback: function)   Adds a callback that will be updated at each game tick.  Example: local tick_count = 0 pewpew.add_update_callback(function() pewpew.print(&quot;this is tick &quot; .. tick_count) tick_count = tick_count + 1 end)     ","version":"Next","tagName":"h3"},{"title":"get_number_of_players()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_number_of_players","content":" pewpew.get_number_of_players(): int   Returns the number of players in the game.    ","version":"Next","tagName":"h3"},{"title":"increase_score_of_player()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#increase_score_of_player","content":" pewpew.increase_score_of_player( player_index: int, delta: int )   Increases the score of the player at the specified player_index by an amount of delta. player_index must in the range [0, get_number_of_players() - 1]. Note that delta can be negative.    ","version":"Next","tagName":"h3"},{"title":"increase_score_streak_of_player()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#increase_score_streak_of_player","content":" pewpew.increase_score_streak_of_player( player_index: int, delta: int )   Increases the score streak counter of the player at the specified player_index by an amount of delta. This counter is used to determine at which level of score streak the player is at. In turn, the score streak level is used to determine how much pointonium is given. Typically the score streak counter should be increased when an enemy is destroyed with the same score that the enemy provide. player_index must in the range [0, get_number_of_players() - 1]. Note that delta can be negative.    ","version":"Next","tagName":"h3"},{"title":"get_score_streak_level()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_score_streak_level","content":" pewpew.get_score_streak_level(player_index: int): int   Returns a number between 0 and 3. 0 is the lowest score streak (no pointonium is given), while 3 is the highest (3 pointoniums is usually given)    ","version":"Next","tagName":"h3"},{"title":"stop_game()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#stop_game","content":" pewpew.stop_game()   Ends the current game.    ","version":"Next","tagName":"h3"},{"title":"get_player_inputs()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_player_inputs","content":" pewpew.get_player_inputs(player_index: int): FixedPoint, FixedPoint, FixedPoint, FixedPoint   Returns the inputs of the player at the specified index. The return values are in order: the movement joystick's angle (between 0 and 2pi), the movement joystick's distance (between 0 and 1), the shoot joystick's angle (between 0 and 2pi), and the shoot joystick's distance (between 0 and 1).  Example: local move_angle, move_distance, shoot_angle, shoot_distance = pewpew.get_player_inputs(0)     ","version":"Next","tagName":"h3"},{"title":"get_score_of_player()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_score_of_player","content":" pewpew.get_score_of_player(player_index: int): int   Returns the score of the player at the specified player_index. player_index must in the range [0, get_number_of_players() - 1].    ","version":"Next","tagName":"h3"},{"title":"configure_player()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#configure_player","content":" pewpew.configure_player( player_index: int, configuration: table { has_lost: bool, shield: int, camera_x_override: FixedPoint, camera_y_override: FixedPoint, camera_distance: FixedPoint, camera_rotation_x_axis: FixedPoint, move_joystick_color: int, shoot_joystick_color: int } )   Configures the player at the specified player_index. player_index must in the range [0, get_number_of_players() - 1]. A camera_distance less than 0fx makes the camera move away from the ship. camera_rotation_x_axis is in radian and rotates along the X axis. To temporarily override the XY position of the camera, set both camera_x_override and camera_y_override; this will make the camera be interpolated from wherever it was, to that new position.  Example: pewpew.configure_player(0, {shield = 3, camera_distance = 50fx, move_joystick_color = 0xffff00ff})     ","version":"Next","tagName":"h3"},{"title":"configure_player_hud()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#configure_player_hud","content":" pewpew.configure_player_hud( player_index: int, configuration: table { top_left_line: string } )   Configures the player's HUD.player_index must in the range [0, get_number_of_players() - 1].  Example: pewpew.configure_player_hud(0, {top_left_line = &quot;Hello World&quot;})     ","version":"Next","tagName":"h3"},{"title":"get_player_configuration()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_player_configuration","content":" pewpew.get_player_configuration(player_index: int): table { shield: int, has_lost: bool }   Returns a map containing the configuration of the player at the specified player_index.  Example: local shield = pewpew.get_player_configuration(0).shield     ","version":"Next","tagName":"h3"},{"title":"configure_player_ship_weapon()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#configure_player_ship_weapon","content":" pewpew.configure_player_ship_weapon( ship_id: EntityId, configuration: table { frequency: int, cannon: int, duration: int } )   Configures the weapon of the ship identified with ship_id using configuration. frequency determines the frequency of the shots. cannon determines the type of cannon. duration determines the number of game ticks during which the weapon will be available. Once the duration expires, the weapon reverts to its permanent configuration. If duration is omitted, the weapon will be permanently set to this configuration. If frequency or cannon is omitted, the ship is configured to not have any weapon.  Example: local weapon_config = {frequency = pewpew.CannonFrequency.FREQ_10, cannon = pewpew.CannonType.DOUBLE} local ship_id = player_helpers.new_player_ship(100fx, 200fx, 0) pewpew.configure_player_ship_weapon(ship_id, weapon_config)     ","version":"Next","tagName":"h3"},{"title":"configure_player_ship_wall_trail()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#configure_player_ship_wall_trail","content":" pewpew.configure_player_ship_wall_trail( ship_id: EntityId, configuration: table { wall_length: int } )   Configures a wall trail that kills everything inside when the ship it is attached to creates a loop with it. wall_length is clamped to [100, 4000]. In Partitioner, the length is 2000. If wall_length is not specified, the trail is removed.  Example: pewpew.configure_player_ship_wall_trail(ship, {wall_length = 2000})     ","version":"Next","tagName":"h3"},{"title":"configure_player_ship()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#configure_player_ship","content":" pewpew.configure_player_ship( ship_id: EntityId, configuration: table { swap_inputs: bool } )   Configures various properties of the player ship identified byid    ","version":"Next","tagName":"h3"},{"title":"add_damage_to_player_ship()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#add_damage_to_player_ship","content":" pewpew.add_damage_to_player_ship( ship_id: EntityId, damage: int )   Reduces the amount of shield of the player that owns the ship by damage points. If the player receives damage while having 0 shields left, the player loses.    ","version":"Next","tagName":"h3"},{"title":"add_arrow_to_player_ship()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#add_arrow_to_player_ship","content":" pewpew.add_arrow_to_player_ship( ship_id: EntityId, target_id: EntityId, color: int ): int   Adds an arrow to the ship identified with ship_id pointing towards the entity identified with entity_id, and returns the identifier of the arrow. color specifies the arrow's color. The arrow is automatically removed when the target entity is destroyed.    ","version":"Next","tagName":"h3"},{"title":"remove_arrow_from_player_ship()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#remove_arrow_from_player_ship","content":" pewpew.remove_arrow_from_player_ship( ship_id: EntityId, arrow_id: int )   Removes the arrow identified by arrow_id from the ship identified by ship_id.    ","version":"Next","tagName":"h3"},{"title":"make_player_ship_transparent()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#make_player_ship_transparent","content":" pewpew.make_player_ship_transparent( ship_id: EntityId, transparency_duration: int )   Makes the player ship transparent for transparency_duration game ticks.    ","version":"Next","tagName":"h3"},{"title":"set_player_ship_speed()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#set_player_ship_speed","content":" pewpew.set_player_ship_speed( ship_id: EntityId, factor: FixedPoint, offset: FixedPoint, duration: int ): FixedPoint   Sets and returns the effective speed of the specified player ship as a function of the base speed of the ship. By default, a player ship moves according to its base speed, which is 10 distance units per tick (in the future, different ships may have different base speeds). Assuming the base speed of the ship is S, the new effective speed will be (factor*S)+offset. duration is the number of ticks during which the effective speed will be applied. Afterwards, the ship's speed reverts to its base speed. If duration is negative, the effective speed never reverts to the base speed.    ","version":"Next","tagName":"h3"},{"title":"get_all_entities()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_all_entities","content":" pewpew.get_all_entities(): List&lt;EntityId&gt;   Returns the list of the entityIDs of all the entities currently in the level. This includes the various bullets and all the custom entities.  Example: local entities = pewpew.get_all_entities() pewpew.print(&quot;There are &quot; .. #entities .. &quot; entities in the level&quot;)     ","version":"Next","tagName":"h3"},{"title":"get_entities_colliding_with_disk()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_entities_colliding_with_disk","content":" pewpew.get_entities_colliding_with_disk( center_x: FixedPoint, center_y: FixedPoint, radius: FixedPoint ): List&lt;EntityId&gt;   Returns the list of collidable entities (which includes all enemies) that overlap with the given disk.  Example: local entities = pewpew.get_entities_colliding_with_disk(100fx, 100fx, 30fx)     ","version":"Next","tagName":"h3"},{"title":"get_entity_count()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_entity_count","content":" pewpew.get_entity_count(type: int): int   Returns the number of entities of type type that are alive.  Example: local number_of_bafs = pewpew.get_entity_count(pewpew.EntityType.BAF) local number_of_asteroids = pewpew.get_entity_count(pewpew.EntityType.ASTEROID)     ","version":"Next","tagName":"h3"},{"title":"get_entity_type()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#get_entity_type","content":" pewpew.get_entity_type(entity_id: EntityId): int   Returns the type of the given entity.  Example: local type = pewpew.get_entity_type(id) if type == pewpew.EntityType.BAF then pewpew.print(&quot;the entity is a BAF&quot;) end     ","version":"Next","tagName":"h3"},{"title":"play_ambient_sound()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#play_ambient_sound","content":" pewpew.play_ambient_sound( sound_path: string, index: int )   Plays the sound described at sound_path at the index index.  Example: pewpew.play_ambient_sound(&quot;/dynamic/my_custom_sound.lua&quot;, 0)     ","version":"Next","tagName":"h3"},{"title":"play_sound()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#play_sound","content":" pewpew.play_sound( sound_path: string, index: int, x: FixedPoint, y: FixedPoint )   Plays the sound described at sound_path at the in-game location of x,y.  Example: pewpew.play_sound(&quot;/dynamic/my_custom_sound.lua&quot;, 0, 100fx, 100fx)     ","version":"Next","tagName":"h3"},{"title":"create_explosion()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#create_explosion","content":" pewpew.create_explosion( x: FixedPoint, y: FixedPoint, color: int, scale: FixedPoint, particle_count: int )   Creates an explosion of particles at the location x,y. color specifies the color of the explosion. scale describes how large the explosion will be. It should be in the range ]0, 10], with 1 being an average explosion. particle_count specifies the number of particles that make up the explosion. It must be in the range [1, 100].  Example: pewpew.create_explosion(200fx, 100fx, 0x00ff00ff, 1fx, 20) -- medium green explosion pewpew.create_explosion(300fx, 100fx, 0xff0000ff, 3fx, 50) -- large red explosion     ","version":"Next","tagName":"h3"},{"title":"add_particle()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#add_particle","content":" pewpew.add_particle( x: FixedPoint, y: FixedPoint, z: FixedPoint, dx: FixedPoint, dy: FixedPoint, dz: FixedPoint, color: int, duration: int )   Adds a particle at the given position, that moves at the given speed, with the given color and duration. The engine may not spawn all particles if are already a lot of particles alive already spawned (e.g. more than 1000)  Example: pewpew.add_particle(10fx, 10fx, 0fx, 4fx, 0fx, 0fx, 0xffffffff, 40)     ","version":"Next","tagName":"h3"},{"title":"new_asteroid()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_asteroid","content":" pewpew.new_asteroid( x: FixedPoint, y: FixedPoint ): EntityId   Creates a new Asteroid at the location x,y and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"new_asteroid_with_size()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_asteroid_with_size","content":" pewpew.new_asteroid_with_size( x: FixedPoint, y: FixedPoint, size: int ): EntityId   Creates a new Asteroid at the location x,y with an AsteroidSize given by size and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"new_baf()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_baf","content":" pewpew.new_baf( x: FixedPoint, y: FixedPoint, angle: FixedPoint, speed: FixedPoint, lifetime: int ): EntityId   Creates a new BAF at the location x,y, and returns its entityId. angle specifies the angle at which the BAF will move. speed specifies the maximum speed it will reach. lifetime indicates the number of game ticks after which the BAF is destroyed the next time it hits a wall. Specify a negative lifetime to create a BAF that lives forever.    ","version":"Next","tagName":"h3"},{"title":"new_baf_red()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_baf_red","content":" pewpew.new_baf_red( x: FixedPoint, y: FixedPoint, angle: FixedPoint, speed: FixedPoint, lifetime: int ): EntityId   Creates a new red BAF at the location x,y, and returns its entityId. A red BAF has more health points than a regular BAF. angle specifies the angle at which the BAF will move. speed specifies the maximum speed it will reach. lifetime indicates the number of game ticks after which the BAF is destroyed the next time it hits a wall. Specify a negative lifetime to create a BAF that lives forever.    ","version":"Next","tagName":"h3"},{"title":"new_baf_blue()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_baf_blue","content":" pewpew.new_baf_blue( x: FixedPoint, y: FixedPoint, angle: FixedPoint, speed: FixedPoint, lifetime: int ): EntityId   Creates a new blue BAF at the location x,y, and returns its entityId. A blue BAF bounces on walls with a slightly randomized angle. angle specifies the angle at which the BAF will move. speed specifies the maximum speed it will reach. lifetime indicates the number of game ticks after which the BAF is destroyed the next time it hits a wall. Specify a negative lifetime to create a BAF that lives forever.    ","version":"Next","tagName":"h3"},{"title":"new_bomb()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_bomb","content":" pewpew.new_bomb( x: FixedPoint, y: FixedPoint, type: int ): EntityId   Creates a new Bomb at the location x,y, and returns its entityId.  Example: pewpew.new_bomb(10fx, 10fx, pewpew.BombType.SMALL_ATOMIZE)     ","version":"Next","tagName":"h3"},{"title":"new_bonus()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_bonus","content":" pewpew.new_bonus( x: FixedPoint, y: FixedPoint, type: int, config: table { box_duration: int, cannon: int, frequency: int, weapon_duration: int, number_of_shields: int, speed_factor: FixedPoint, speed_offset: FixedPoint, speed_duration: int, taken_callback: function } ): EntityId   Creates a new Bonus at the location x,y of the type type, and returns its entityId. For shield bonuses, the option number_of_shields determines how many shields are given out. For weapon bonuses, the options cannon, frequency, weapon_duration have the same meaning as in pewpew.configure_player_ship_weapon. For speed bonuses, the options speed_factor, speed_offset,and speed_duration have the same meaning as in set_player_speed. taken_callback is called when the bonus is taken, and is mandatory for the reinstantiation bonus. The callback receives as arguments the entity id of the bonus, the player id, and the ship's entity id. The default box duration is 400 ticks.  Example: pewpew.new_bonus(10fx, 10fx, pewpew.BonusType.WEAPON, {cannon = pewpew.CannonType.TIC_TOC, frequency = pewpew.CannonFrequency.FREQ_5, weapon_duration = 100}) pewpew.new_bonus(10fx, 10fx, pewpew.BonusType.SHIELD, {number_of_shields = 3})     ","version":"Next","tagName":"h3"},{"title":"new_crowder()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_crowder","content":" pewpew.new_crowder( x: FixedPoint, y: FixedPoint ): EntityId   Creates a new Crowder at the location x,y, and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"new_floating_message()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_floating_message","content":" pewpew.new_floating_message( x: FixedPoint, y: FixedPoint, str: string, config: table { scale: FixedPoint, dz: FixedPoint, ticks_before_fade: int, is_optional: bool } ): EntityId   Creates a new floating message at the location x,y, with str as the message. The scale is a number that determines how large the message will be. 1 is the default scale. ticks_before_fade determines how many ticks occur before the message starts to fade out. is_optional can be used to tell the game if the message can be hidden depending on the user's UI settings. If not specified, scale is 1, ticks_before_fade is 30 and is_optional is false. Returns the floating message's entityId.  Example: pewpew.new_floating_message(10fx, 10fx, &quot;hello&quot;, {scale = 2fx, ticks_before_fade = 60, is_optional = true})     ","version":"Next","tagName":"h3"},{"title":"new_customizable_entity()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_customizable_entity","content":" pewpew.new_customizable_entity( x: FixedPoint, y: FixedPoint ): EntityId   Creates a new customizable entity at the location x,y, and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"new_inertiac()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_inertiac","content":" pewpew.new_inertiac( x: FixedPoint, y: FixedPoint, acceleration: FixedPoint, angle: FixedPoint ): EntityId   Creates a new Inertiac at the location x,y, and returns its entityId. The inertiac will accelerate according to acceleration. It spawns with a random velocity in a direction specified by angle.    ","version":"Next","tagName":"h3"},{"title":"new_kamikaze()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_kamikaze","content":" pewpew.new_kamikaze( x: FixedPoint, y: FixedPoint, angle: FixedPoint ): EntityId   Creates a new Kamikaze at the location x,y that starts moving in the direction specified by angle.    ","version":"Next","tagName":"h3"},{"title":"new_mothership()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_mothership","content":" pewpew.new_mothership( x: FixedPoint, y: FixedPoint, type: int, angle: FixedPoint ): EntityId   Creates a new Mothership at the location x,y, and returns its entityId.  Example: pewpew.new_mothership(50fx, 50fx, pewpew.MothershipType.THREE_CORNERS, fmath.tau() / 4fx)     ","version":"Next","tagName":"h3"},{"title":"new_mothership_bullet()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_mothership_bullet","content":" pewpew.new_mothership_bullet( x: FixedPoint, y: FixedPoint, angle: FixedPoint, speed: FixedPoint, color: int, large: bool ): EntityId   Creates a new mothership bullet.    ","version":"Next","tagName":"h3"},{"title":"new_pointonium()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_pointonium","content":" pewpew.new_pointonium( x: FixedPoint, y: FixedPoint, value: int ): EntityId   Creates a new Pointonium at the location x,y. Value must be 64, 128, or 256.    ","version":"Next","tagName":"h3"},{"title":"new_plasma_field()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_plasma_field","content":" pewpew.new_plasma_field( ship_a_id: EntityId, ship_b_id: EntityId, config: table { length: FixedPoint, stiffness: FixedPoint } ): EntityId   Creates a new plasma field between ship_a and ship_b, and returns its entityId. If ship_a or ship_b is destroyed, the plasma field is destroyed as well. length is optional, and specifies the length of the plasma field (defaut is 150). stiffness is optional, and specifies the stiffness of the plasma field (default is 1)    ","version":"Next","tagName":"h3"},{"title":"new_player_ship()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_player_ship","content":" pewpew.new_player_ship( x: FixedPoint, y: FixedPoint, player_index: int ): EntityId   Creates a new Player Ship at the location x,y for the player identified by player_index, and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"new_player_bullet()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_player_bullet","content":" pewpew.new_player_bullet( x: FixedPoint, y: FixedPoint, angle: FixedPoint, player_index: int ): EntityId   Creates a new bullet at the location x,y with the angle angle belonging to the player at the index player_index. Returns the entityId of the bullet.    ","version":"Next","tagName":"h3"},{"title":"new_rolling_cube()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_rolling_cube","content":" pewpew.new_rolling_cube( x: FixedPoint, y: FixedPoint ): EntityId   Creates a new Rolling Cube at the location x,y, and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"new_rolling_sphere()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_rolling_sphere","content":" pewpew.new_rolling_sphere( x: FixedPoint, y: FixedPoint, angle: FixedPoint, speed: FixedPoint ): EntityId   Creates a new Rolling Sphere at the location x,y, and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"new_spiny()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_spiny","content":" pewpew.new_spiny( x: FixedPoint, y: FixedPoint, angle: FixedPoint, attractivity: FixedPoint ): EntityId   Creates a new Spiny at the location x,y that starts moving in the direction specified by angle. attractivity specifies how much the Spiny is attracted to the closest player: 1fx is normal attractivity.    ","version":"Next","tagName":"h3"},{"title":"new_super_mothership()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_super_mothership","content":" pewpew.new_super_mothership( x: FixedPoint, y: FixedPoint, type: int, angle: FixedPoint ): EntityId   Creates a new Super Mothership at the location x,y, and returns its entityId.  Example: pewpew.new_super_mothership(50fx, 50fx, pewpew.MothershipType.THREE_CORNERS, fmath.tau() / 4fx)     ","version":"Next","tagName":"h3"},{"title":"new_wary()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_wary","content":" pewpew.new_wary( x: FixedPoint, y: FixedPoint ): EntityId   Creates a new Wary at the location x,y.    ","version":"Next","tagName":"h3"},{"title":"new_ufo()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#new_ufo","content":" pewpew.new_ufo( x: FixedPoint, y: FixedPoint, dx: FixedPoint ): EntityId   Creates a new UFO at the location x,y moving horizontally at the speed of dx, and returns its entityId.    ","version":"Next","tagName":"h3"},{"title":"rolling_cube_set_enable_collisions_with_walls()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#rolling_cube_set_enable_collisions_with_walls","content":" pewpew.rolling_cube_set_enable_collisions_with_walls( entity_id: EntityId, collide_with_walls: bool )   Sets whether the rolling cube identified with id collides with walls. By default it does not.  Example: local x,y = pewpew.rolling_cube_set_enable_collisions_with_walls(id, true)     ","version":"Next","tagName":"h3"},{"title":"ufo_set_enable_collisions_with_walls()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#ufo_set_enable_collisions_with_walls","content":" pewpew.ufo_set_enable_collisions_with_walls( entity_id: EntityId, collide_with_walls: bool )   Sets whether the ufo identified with id collides with walls. By default it does not.  Example: local x,y = pewpew.ufo_set_enable_collisions_with_walls(id, true)     ","version":"Next","tagName":"h3"},{"title":"entity_get_position()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_get_position","content":" pewpew.entity_get_position(entity_id: EntityId): FixedPoint, FixedPoint   Returns the position of the entity identified by id.  Example: local x,y = pewpew.entity_get_position(entity_id)     ","version":"Next","tagName":"h3"},{"title":"entity_get_is_alive()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_get_is_alive","content":" pewpew.entity_get_is_alive(entity_id: EntityId): bool   Returns whether the entity identified by id is alive or not.    ","version":"Next","tagName":"h3"},{"title":"entity_get_is_started_to_be_destroyed()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_get_is_started_to_be_destroyed","content":" pewpew.entity_get_is_started_to_be_destroyed(entity_id: EntityId): bool   Returns whether the entity identified by id is in the process of being destroyed. Returns false if the entity does not exist.    ","version":"Next","tagName":"h3"},{"title":"entity_set_position()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_set_position","content":" pewpew.entity_set_position( entity_id: EntityId, x: FixedPoint, y: FixedPoint )   Sets the position of the entity identified by id to x,y    ","version":"Next","tagName":"h3"},{"title":"entity_move()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_move","content":" pewpew.entity_move( entity_id: EntityId, dx: FixedPoint, dy: FixedPoint )   Attempts to move the entity identified by id by dx,dy. Movement will be blocked by walls.    ","version":"Next","tagName":"h3"},{"title":"entity_set_radius()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_set_radius","content":" pewpew.entity_set_radius( entity_id: EntityId, radius: FixedPoint )   Sets the radius of the entity identified by id. To give you a sense of scale, motherships have a radius of 28fx.    ","version":"Next","tagName":"h3"},{"title":"entity_set_update_callback()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_set_update_callback","content":" pewpew.entity_set_update_callback( entity_id: EntityId, callback: function )   Sets a callback that will be called at every tick as long as the entity identified by id is alive. Remove the callback by passing a nil callback. The callbacks gets called with the entity ID.  Example: local function my_update_callback(entity_id) local x,y = pewpew.entity_get_position(entity_id) pewpew.entity_set_position(entity_id, x + 2fx, y) -- move the entity to the right end pewpew.entity_set_update_callback(entity_id, my_update_callback)     ","version":"Next","tagName":"h3"},{"title":"entity_destroy()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_destroy","content":" pewpew.entity_destroy(entity_id: EntityId)   Makes the entity identified by id immediately disappear forever.    ","version":"Next","tagName":"h3"},{"title":"entity_react_to_weapon()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_react_to_weapon","content":" pewpew.entity_react_to_weapon( entity_id: EntityId, weapon: table { type: int, x: FixedPoint, y: FixedPoint, player_index: int } ): bool   Makes the entity identified by id react to the weapon described in weapon_description. Returns whether the entity reacted to the weapon. The returned value is typically used to decide whether the weapon should continue to exist or not. In the case of an explosion, x and y should store the origin of the explosion. In the case of a bullet, x and y should store the vector of the bullet. The player identified by player_index will be assigned points. If player_index is invalid, no player will be assigned points.    ","version":"Next","tagName":"h3"},{"title":"entity_add_mace()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#entity_add_mace","content":" pewpew.entity_add_mace( target_id: EntityId, config: table { distance: FixedPoint, angle: FixedPoint, rotation_speed: FixedPoint, type: int } ): EntityId   Adds a mace to the entity identified with entity_id. If rotation_speed exists, the mace will have a natural rotation, otherwise it will move due to inertia.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_position_interpolation()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_position_interpolation","content":" pewpew.customizable_entity_set_position_interpolation( entity_id: EntityId, enable: bool )   Sets whether the position of the mesh wil be interpolated when rendering. In general, this should be set to true if the entity will be moving.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_angle_interpolation()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_angle_interpolation","content":" pewpew.customizable_entity_set_angle_interpolation( entity_id: EntityId, enable: bool )   Sets whether the angle of the mesh wil be interpolated when rendering. Angle interpolation is enabled by default.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_mesh()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_mesh","content":" pewpew.customizable_entity_set_mesh( entity_id: EntityId, file_path: string, index: int )   Sets the mesh of the customizable entity identified by id to the mesh described in the file file_path at the index index. index starts at 0. If file_path is an empty string, the mesh is removed.  Example: local id = pewpew.new_customizable_entity(0fx, 0fx) pewpew.customizable_entity_set_mesh(id, &quot;/dynamic/graphics.lua&quot;, 0)     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_flipping_meshes()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_flipping_meshes","content":" pewpew.customizable_entity_set_flipping_meshes( entity_id: EntityId, file_path: string, index_0: int, index_1: int )   Similar to customizable_entity_set_mesh, but sets two meshes that will be used in alternation. By specifying 2 separate meshes, 60 fps animations can be achieved.  Example: local id = pewpew.new_customizable_entity(0fx, 0fx) pewpew.customizable_entity_set_flipping_meshes(id, &quot;/dynamic/graphics.lua&quot;, 0, 1)     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_mesh_color()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_mesh_color","content":" pewpew.customizable_entity_set_mesh_color( entity_id: EntityId, color: int )   Sets the color multiplier for the mesh of the customizable entity identified by id.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_string()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_string","content":" pewpew.customizable_entity_set_string( entity_id: EntityId, text: string )   Sets the string to be displayed as part of the mesh of the customizable entity identified by id.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_mesh_xyz()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_mesh_xyz","content":" pewpew.customizable_entity_set_mesh_xyz( entity_id: EntityId, x: FixedPoint, y: FixedPoint, z: FixedPoint )   Sets the position of the mesh to x,y,z, relative to the center of the customizable entity identified by id    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_mesh_z()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_mesh_z","content":" pewpew.customizable_entity_set_mesh_z( entity_id: EntityId, z: FixedPoint )   Sets the height of the mesh of the customizable entity identified by id. A z greater to 0 makes the mesh be closer, while a z less than 0 makes the mesh be further away.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_mesh_scale()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_mesh_scale","content":" pewpew.customizable_entity_set_mesh_scale( entity_id: EntityId, scale: FixedPoint )   Sets the scale of the mesh of the customizable entity identified by id. A scale less than 1 makes the mesh appear smaller, while a scale greater than 1 makes the mesh appear larger.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_mesh_xyz_scale()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_mesh_xyz_scale","content":" pewpew.customizable_entity_set_mesh_xyz_scale( entity_id: EntityId, x_scale: FixedPoint, y_scale: FixedPoint, z_scale: FixedPoint )   Sets the scale of the mesh of the customizable entity identified by id along the x,y,z axis. A scale less than 1 makes the mesh appear smaller, while a scale greater than 1 makes the mesh appear larger.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_mesh_angle()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_mesh_angle","content":" pewpew.customizable_entity_set_mesh_angle( entity_id: EntityId, angle: FixedPoint, x_axis: FixedPoint, y_axis: FixedPoint, z_axis: FixedPoint )   Sets the rotation angle of the mesh of the customizable entity identified by id. The rotation is applied along the axis defined by x_axis,y_axis,z_axis.  Example: -- Rotate the entity by 45 degrees along the z_axis pewpew.customizable_entity_set_mesh_angle(entity_id, fmath.tau() / 8fx, 0fx, 0fx, 1fx)     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_skip_mesh_attributes_interpolation()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_skip_mesh_attributes_interpolation","content":" pewpew.customizable_entity_skip_mesh_attributes_interpolation(entity_id: EntityId)   Skips the interpolation of the mesh's attributes (x, y, z, scale_x, scale_y, scale_z, rotation) for one tick. Only applies to the attributes that were set before the call to customizable_entity_skip_mesh_attributes_interpolation    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_configure_music_response()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_configure_music_response","content":" pewpew.customizable_entity_configure_music_response( entity_id: EntityId, config: table { color_start: int, color_end: int, scale_x_start: FixedPoint, scale_x_end: FixedPoint, scale_y_start: FixedPoint, scale_y_end: FixedPoint, scale_z_start: FixedPoint, scale_z_end: FixedPoint } )   Configures the way the entity is going to respond to the music.  Example: -- Makes the entity larger pewpew.customizable_entity_configure_music_response(entity_id, {scale_x_start = 1fx, scale_x_end = 2fx})     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_add_rotation_to_mesh()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_add_rotation_to_mesh","content":" pewpew.customizable_entity_add_rotation_to_mesh( entity_id: EntityId, angle: FixedPoint, x_axis: FixedPoint, y_axis: FixedPoint, z_axis: FixedPoint )   Adds a rotation to the mesh of the customizable entity identified by id. The rotation is applied along the axis defined by x_axis,y_axis,z_axis.  Example: -- Rotate the entity by 45 degrees along the z_axis pewpew.customizable_entity_add_rotation_to_mesh(entity_id, fmath.tau() / 8fx, 0fx, 0fx, 1fx)     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_visibility_radius()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_visibility_radius","content":" pewpew.customizable_entity_set_visibility_radius( entity_id: EntityId, radius: FixedPoint )   Sets the radius defining the visibility of the entity. This allows the game to know when an entity is actually visible, which in turns allows to massively optimize the rendering. Use the smallest value possible. If not set, the rendering radius is an unspecified large number that effectively makes the entity always be rendered, even if not visible.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_configure_wall_collision()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_configure_wall_collision","content":" pewpew.customizable_entity_configure_wall_collision( entity_id: EntityId, collide_with_walls: bool, collision_callback: function )   collide_with_walls configures whether the entity should stop when colliding with walls. If collision_callback is not nil, it is called anytime a collision is detected. The callback gets called with the entity id of the entity withthe callback, and with the normal to the wall.  Example: function my_wall_collision_callback(entity_id, wall_normal_x, wall_normal_y) pewpew.print(&quot;A wall collision happened with entity &quot; .. entity_id) end local id = pewpew.new_customizable_entity(100fx, 100fx) pewpew.customizable_entity_configure_wall_collision(id, my_wall_collision_callback)     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_player_collision_callback()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_player_collision_callback","content":" pewpew.customizable_entity_set_player_collision_callback( entity_id: EntityId, collision_callback: function )   Sets the callback for when the customizable entity identified by id collides with a player's ship. The callback gets called with the entity id of the entity with the callback, and the player_index and ship_id that were involved in the collision. Don't forget to set a radius on the customizable entity, otherwise no collisions will be detected.  Example: function my_collision_callback(entity_id, player_index, ship_entity_id) pewpew.print(&quot;The entity: &quot; .. entity_id) pewpew.print(&quot;Collided with the ship: &quot; .. ship_entity_id) pewpew.print(&quot;That belongs to the player: &quot; .. player_index) end local id = pewpew.new_customizable_entity(100fx, 100fx) pewpew.customizable_entity_set_player_collision_callback(id, my_collision_callback)     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_weapon_collision_callback()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_weapon_collision_callback","content":" pewpew.customizable_entity_set_weapon_collision_callback( entity_id: EntityId, weapon_collision_callback: function )   Sets the callback for when the customizable entity identified by id collides with a player's weapon. The callback gets called with the entity_id of the entity on which the callback is set, the player_index of the player that triggered the weapon, and the type of the weapon. The callback must return a boolean saying whether the entity reacts to the weapon. In the case of a bullet, this boolean determines whether the bullet should be destroyed.  Example: local id = pewpew.new_customizable_entity(100fx, 100fx) pewpew.customizable_entity_set_weapon_collision_callback(id, function(entity_id, player_index, weapon_type) pewpew.print(&quot;Collided with weapon from player: &quot; .. player_index) if weapon_type == pewpew.WeaponType.BULLET then pewpew.print(&quot;Collided with bullet!&quot;) end return true end)     ","version":"Next","tagName":"h3"},{"title":"customizable_entity_start_spawning()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_start_spawning","content":" pewpew.customizable_entity_start_spawning( entity_id: EntityId, spawning_duration: int )   Makes the customizable entity identified by id spawn for a duration of spawning_duration game ticks.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_start_exploding()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_start_exploding","content":" pewpew.customizable_entity_start_exploding( entity_id: EntityId, explosion_duration: int )   Makes the customizable entity identified by id explode for a duration of explosion_duration game ticks. After the explosion, the entity is destroyed. explosion_duration must be less than 255. Any scale applied to the entity is also applied to the explosion.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_set_tag()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_set_tag","content":" pewpew.customizable_entity_set_tag( entity_id: EntityId, tag: int )   Sets a tag on customizable entities. The tag can be read back with customizable_entity_get_tag.    ","version":"Next","tagName":"h3"},{"title":"customizable_entity_get_tag()​","type":1,"pageTitle":"pewpew library","url":"/ppl-docs/APIs/PewPew#customizable_entity_get_tag","content":" pewpew.customizable_entity_get_tag(entity_id: EntityId): int   Returns the tag that was set, or 0 if no tag was set. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}